/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package run.threats;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

import run.threats.handler.Runner;

public class App {
    public static void main(String[] args) {
        final Runnable action = () -> {
            // fibonacci
            int n = 100;
            Map<Integer, Long> cache = new HashMap<>();
            System.out.println("Serie de Fibonacci hasta el " + n + " números:");
            for (int i = 0; i < n; i++) {
                System.out.print(fibonacci(i, cache) + " ");
            }
        };

        final Consumer<Runner> finishAction = runner -> {
            System.out.println(runner.getName() + " acabó en: " + runner.getDuration() + "ms");
        };

        final Runner first = new Runner("first", action, finishAction);
        final Runner second = new Runner("second", action, finishAction);
        final Runner third = new Runner("third", action, finishAction);
        final Runner fourth = new Runner("fourth", action, finishAction);

        first.start();
        second.start();
        third.start();
        fourth.start();

    }

    public static long fibonacci(int n, Map<Integer, Long> cache) {
        if (n <= 1) {
            return n;
        } else if (cache.containsKey(n)) {
            return cache.get(n);
        } else {
            long result = fibonacci(n - 1, cache) + fibonacci(n - 2, cache);
            cache.put(n, result);
            return result;
        }
    }

}
